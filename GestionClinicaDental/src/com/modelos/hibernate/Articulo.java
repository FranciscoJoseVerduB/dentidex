package com.modelos.hibernate;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.conexion.ConexionBBDD;

// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final

 
/**
 * Articulo generated by hbm2java
 */
@SuppressWarnings("serial")
public class Articulo implements java.io.Serializable, IOperable, ICodigoUnico {

	private int id;
	private FamiliaArticulo familiaArticulo;
	private String codigo;
	private String nombre;
	private Double precioCompra;
	private Integer cantidadExistencia;
	private Medicamento medicamento;

	public Articulo() {
		this.id = 0;
		this.familiaArticulo = new FamiliaArticulo();
		this.medicamento = new Medicamento();
	}
	public Articulo (int id) {
		this.id = id;
	}

	
	public Articulo(int id, FamiliaArticulo familiasarticulo, String codigo, String nombre) {
		this.id = id;
		this.familiaArticulo = familiasarticulo;
		this.codigo = codigo;
		this.nombre = nombre;
	}

	public Articulo(int id, FamiliaArticulo familiasarticulo, String codigo, String nombre, Double preciocompra,
			Integer cantidadexistencias, Medicamento medicamento) {
		this.id = id;
		this.familiaArticulo = familiasarticulo;
		this.codigo = codigo;
		this.nombre = nombre;
		this.precioCompra = preciocompra;
		this.cantidadExistencia = cantidadexistencias;
		this.medicamento = medicamento;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public FamiliaArticulo getFamiliaArticulo() {
		return this.familiaArticulo;
	}

	public void setFamiliaArticulo(FamiliaArticulo familiasarticulo) {
		this.familiaArticulo = familiasarticulo;
	}

	public String getCodigo() {
		return this.codigo;
	}

	public void setCodigo(String codigo) {
		this.codigo = codigo;
	}

	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Double getPrecioCompra() {
		return this.precioCompra;
	}

	public void setPrecioCompra(Double preciocompra) {
		this.precioCompra = preciocompra;
	}

	public Integer getCantidadExistencia() {
		return this.cantidadExistencia;
	}

	public void setCantidadExistencia(Integer cantidadexistencia) {
		this.cantidadExistencia = cantidadexistencia;
	}

	public Medicamento getMedicamento() {
		return this.medicamento;
	}

	public void setMedicamento(Medicamento medicamento) {
		this.medicamento = medicamento;
	}

	@Override
	public String toString() { 
		return getCodigo() + "--" + getNombre();
	}


	@Override
	public boolean cargar() {
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM ArticulosVista WHERE Id_Articulo = " + this.getId());
			if (rs.next() == false) return false;
			else {  
				setCodigo(rs.getString("ArticuloCodigo"));
				setNombre(rs.getString("ArticuloNombre"));
				setPrecioCompra(rs.getDouble("PrecioCompra"));
				setCantidadExistencia(rs.getInt("CantidadExistencia"));
				setFamiliaArticulo(new FamiliaArticulo());
				getFamiliaArticulo().setId(rs.getInt("Id_FamiliaArticulo"));
				getFamiliaArticulo().setCodigo(rs.getString("FamiliaArticuloCodigo"));
				getFamiliaArticulo().setNombre(rs.getString("FamiliaArticuloNombre"));
				setMedicamento(new Medicamento());
				getMedicamento().setId(rs.getInt("Id_Medicamento"));
				getMedicamento().setFarmaco(rs.getString("Farmaco"));
				getMedicamento().setNombreComercial(rs.getString("NombreComercial"));
				getMedicamento().setPresentacion(rs.getString("Presentacion"));
				getMedicamento().setIndicacion(rs.getString("Indicacion"));
				getMedicamento().setViaAdministracion(rs.getString("ViaAdministracion"));
				
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<Articulo> getLista() {
		ArrayList<Articulo> lista = new ArrayList<Articulo>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM ArticulosVista");
			while(rs.next()) {
				Articulo p = new Articulo();
				p.setId(rs.getInt("Id_Articulo"));
				p.setCodigo(rs.getString("ArticuloCodigo"));
				p.setNombre(rs.getString("ArticuloNombre"));
				p.setPrecioCompra(rs.getDouble("PrecioCompra"));
				p.setCantidadExistencia(rs.getInt("CantidadExistencia"));
				p.setFamiliaArticulo(new FamiliaArticulo());
				p.getFamiliaArticulo().setId(rs.getInt("Id_FamiliaArticulo"));
				p.getFamiliaArticulo().setCodigo(rs.getString("FamiliaArticuloCodigo"));
				p.getFamiliaArticulo().setNombre(rs.getString("FamiliaArticuloNombre"));
				p.setMedicamento(new Medicamento());
				p.getMedicamento().setId(rs.getInt("Id_Medicamento"));
				p.getMedicamento().setFarmaco(rs.getString("Farmaco"));
				p.getMedicamento().setNombreComercial(rs.getString("NombreComercial"));
				p.getMedicamento().setPresentacion(rs.getString("Presentacion"));
				p.getMedicamento().setIndicacion(rs.getString("Indicacion"));
				p.getMedicamento().setViaAdministracion(rs.getString("ViaAdministracion"));
				
				lista.add(p); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista;
	}

	@Override
	public boolean guardar() {
		String sql = "";
		
		if(this.getId() == 0) {
			sql = "INSERT INTO Articulos (Codigo, Nombre, PrecioCompra, CantidadExistencia, Id_FamiliaArticulo, Id_Medicamento)"
					+ "	VALUES ('" + this.getCodigo().trim() + "', '" + 
									 this.getNombre().trim() + "'," +
									 this.getPrecioCompra().toString() + "," + 
									 this.getCantidadExistencia().toString() + "," + 
									 (this.getFamiliaArticulo() != null && this.getFamiliaArticulo().getId() > 0 ? String.valueOf(this.getFamiliaArticulo().getId()) : "null") + "," + 
									 (this.getMedicamento() != null && this.getMedicamento().getId() > 0 ? String.valueOf(this.getMedicamento().getId()) : "null") +
					")"; 
		}else {
			sql = "UPDATE Articulos "
					+ " SET Codigo = '" + this.getCodigo().trim() + "',"
						+ "	Nombre = '" + this.getNombre().trim() + "'," 
						+ " PrecioCompra = " + this.getPrecioCompra() + ","
						+ " CantidadExistencia = " + this.getCantidadExistencia() + "," 
						+ " Id_FamiliaArticulo = " + (this.getFamiliaArticulo() != null && this.getFamiliaArticulo().getId() > 0 ? String.valueOf(this.getFamiliaArticulo().getId()) : "null") + "," 
						+ " Id_Medicamento = " + (this.getMedicamento() != null && this.getMedicamento().getId() > 0 ? String.valueOf(this.getMedicamento().getId()) : "null") 
				+ " WHERE Id = " + this.getId();			
		} 	
		return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean esEliminable() {
		//Esta clase no tiene dependencias de momento. Por lo tanto siempre será eliminable
		return true;
	}

	@Override
	public boolean borrar() {
		String sql = 
				 "DELETE "
				+ "	FROM Articulos" 
				+ "	WHERE ID = " + this.getId();
		return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean existeConMismoCodigo(String codigo) {
		if(Integer.parseInt(ConexionBBDD.getDato("SELECT count(*) Existe FROM Articulos Where Codigo = '" + codigo.trim() + "' and Id <>" + this.getId()).toString()) > 0) 
			return true;
			 
		return false;
	}
}
