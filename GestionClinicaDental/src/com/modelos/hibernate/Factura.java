package com.modelos.hibernate;
// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final
 
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date; 

import com.conexion.ConexionBBDD;

/**
 * Factura generated by hbm2java
 */
@SuppressWarnings("serial")
public class Factura implements java.io.Serializable, IOperable {

	private int id;
	private Medico medico;
	private Paciente paciente;
	private Date fecha;
	private String serie;
	private int numero;
	private Double porcentajeIva;
	private Double porcentajeDescuento;
	private Double baseImponible;
	private Double importeFactura;
	private String observaciones;
	private ArrayList<FacturaDetalle> facturaDetalle;

	public Factura() {
		this.id = 0;
		this.facturaDetalle = new ArrayList<FacturaDetalle>();
	}
	
	public Factura(int id) {
		this.id = id;
	}

	public Factura(int id, Medico medico, Paciente paciente, Date fecha, String serie, int numero,
			Double porcentajeIva, Double baseImponible, Double importeFactura, String observaciones) {
		this.id = id;
		this.medico = medico;
		this.paciente = paciente;
		this.fecha = fecha;
		this.serie = serie;
		this.numero = numero;
		this.porcentajeIva = porcentajeIva;
		this.baseImponible = baseImponible;
		this.importeFactura = importeFactura;
		this.observaciones = observaciones;
	}

	public Factura(int id, Medico medico, Paciente paciente, Date fecha, String serie, int numero,
			Double porcentajeiva, Double baseimponible, Double importefactura, String observaciones,
			ArrayList<FacturaDetalle> facturadetalles) {
		this.id = id;
		this.medico = medico;
		this.paciente = paciente;
		this.fecha = fecha;
		this.serie = serie;
		this.numero = numero;
		this.porcentajeIva = porcentajeiva;
		this.baseImponible = baseimponible;
		this.importeFactura = importefactura;
		this.observaciones = observaciones;
		this.facturaDetalle = facturadetalles;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Medico getMedico() {
		return this.medico;
	}

	public void setMedico(Medico medicos) {
		this.medico = medicos;
	}

	public Paciente getPaciente() {
		return this.paciente;
	}

	public void setPaciente(Paciente pacientes) {
		this.paciente = pacientes;
	}

	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	public String getSerie() {
		return this.serie;
	}

	public void setSerie(String serie) {
		this.serie = serie;
	}

	public int getNumero() {
		return this.numero;
	}

	public void setNumero(int numero) {
		this.numero = numero;
	}

	public Double getPorcentajeIva() {
		return this.porcentajeIva;
	}

	public void setPorcentajeIva(Double porcentajeiva) {
		this.porcentajeIva = porcentajeiva;
	}

	public Double getBaseImponible() {
		return this.baseImponible;
	}

	public void setBaseImponible(Double baseimponible) {
		this.baseImponible = baseimponible;
	}

	public Double getImporteFactura() {
		return this.importeFactura;
	}

	public void setImporteFactura(Double importefactura) {
		this.importeFactura = importefactura;
	}

	public String getObservaciones() {
		return this.observaciones;
	}

	public void setObservaciones(String observaciones) {
		this.observaciones = observaciones;
	}

	public ArrayList<FacturaDetalle> getFacturaDetalle() {
		return this.facturaDetalle;
	}

	public void setFacturaDetalle(ArrayList<FacturaDetalle> facturadetalle) {
		this.facturaDetalle = facturadetalle;
	}

	public Double getPorcentajeDescuento() {
		return porcentajeDescuento;
	}

	public void setPorcentajeDescuento(Double porcentajeDescuento) {
		this.porcentajeDescuento = porcentajeDescuento;
	}
	

	@Override
	public String toString() {
		return this.getSerie() + "/" + String.valueOf(this.getNumero());
	}

	public void calcularPie() {
		Double importeBruto = 0D;
		Double importeDescuento = 0D;
		Double importePorcentajeIva = 0D;
		for(FacturaDetalle fd : this.getFacturaDetalle()) importeBruto += fd.getPrecio();	//Obtenemos el importe bruto del documento
		
		//Obtenemos el porcentaje de descuento y aplicamos un descuento
		if(this.getPorcentajeDescuento() != null && this.getPorcentajeDescuento() != 0) importeDescuento = importeBruto * getPorcentajeDescuento() / 100;
		//Obtenemos el porcentaje de IVA y le sumamos el IVA
		if(this.getPorcentajeIva() != null && this.getPorcentajeIva() != 0) importePorcentajeIva = importeBruto * getPorcentajeIva() / 100;
		
		//Restamos el descuento al importe final
		importeBruto -= importeDescuento;
		//Establecemos la base imponible
		this.setBaseImponible(importeBruto);
		
		//Aplicamos un IVA al documento
		importeBruto += importePorcentajeIva;
		//Establecemos el valor del documento total 
		this.setImporteFactura(importeBruto);
	}
	
	public Double getSaldoRestante() {
		return this.getImporteFactura() - this.getTotalImporteCobrado();
	}

	public Double getTotalImporteCobrado() {
		Double importe = 0D; 
		for(FacturaDetalle fd : this.getFacturaDetalle()) importe += fd.getCobrado();	//Obtenemos el importe cobrado del documento
		return importe;
	}
	

	
	public Factura getFactura(HistorialClinicoDetalle historialClinicoDetalle) { 
			try {
				ResultSet rs = ConexionBBDD.getDatos("SELECT ID_Factura FROM FacturasVista " +
													 "	WHERE Id_HistorialClinicoDetalle = " + historialClinicoDetalle.getId() + 
													" LIMIT 1;");
				if(rs.next() == false) return null;
				else {  
					this.setId(rs.getInt("Id_Factura"));
				}
			} catch (SQLException e) { 
				e.printStackTrace();
				return null;
			} 
		this.cargar();
		return this;
	} 
	
	
	public Factura getPresupuesto(HistorialClinicoDetalle historialClinicoDetalle) { 
		setFecha(com.util.Tiempo.convertirADate(LocalDate.now()));
		setMedico(historialClinicoDetalle.getCita().getMedico());
		setPaciente(historialClinicoDetalle.getCita().getPaciente()); 
		
		//Recorremos todas las lineas de la visita y lo añadimos a la factura
		for(HistorialClinicoDetalle_Tratamiento tra : historialClinicoDetalle.getHistorialClinicoDetalle_Tratamiento()){
			FacturaDetalle fd = new FacturaDetalle();
			fd.setCobrado(0D);
			fd.setFactura(this);
			fd.setHistorialClinicoDetalle_Tratamiento(tra);
			fd.setPrecio(tra.getTratamiento().getPrecio()); 
			getFacturaDetalle().add(fd);
		}
		
		calcularPie();		//Calculamos el pie del documento
		
		return this;
	}
	
	@Override
	public boolean cargar() {
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM Facturas where id = " + this.getId());
			if(rs.next() == false) return false;
			else {  
				Medico medico = new Medico(rs.getInt("id_medico"));
				medico.cargar(); 
				setMedico(medico);
				Paciente paciente = new Paciente(rs.getInt("id_paciente"));
				paciente.cargar();
				setPaciente(paciente);
				setFecha(rs.getDate("Fecha"));
				setSerie(rs.getString("Serie"));
				setNumero(rs.getInt("Numero"));
				setPorcentajeIva(rs.getDouble("PorcentajeIva"));
				setPorcentajeDescuento(rs.getDouble("PorcentajeDescuento"));
				setBaseImponible(rs.getDouble("BaseImponible"));
				setImporteFactura(rs.getDouble("ImporteFactura"));
				setObservaciones(rs.getString("Observaciones"));
				setFacturaDetalle(new FacturaDetalle().getLista(this));
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<Factura> getLista() {
		ArrayList<Factura> lista = new ArrayList<Factura>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM Facturas");
			while(rs.next()) {
				Factura p = new Factura(rs.getInt("id"));
				Medico medico = new Medico(rs.getInt("id_medico"));
				medico.cargar(); 
				p.setMedico(medico);
				Paciente paciente = new Paciente(rs.getInt("id_paciente"));
				paciente.cargar();
				p.setPaciente(paciente);
				p.setFecha(rs.getDate("Fecha"));
				p.setSerie(rs.getString("Serie"));
				p.setNumero(rs.getInt("Numero"));
				p.setPorcentajeIva(rs.getDouble("PorcentajeIva"));
				p.setPorcentajeDescuento(rs.getDouble("PorcentajeDescuento"));
				p.setBaseImponible(rs.getDouble("BaseImponible"));
				p.setImporteFactura(rs.getDouble("ImporteFactura"));
				p.setObservaciones(rs.getString("Observaciones"));
				p.setFacturaDetalle(new FacturaDetalle().getLista(p));
				lista.add(p);
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista; 
	}

	@Override
	public boolean guardar() {
		String sql = "";
		if(this.getId() == 0) {
				sql +="INSERT INTO Facturas(Fecha, Serie, Numero, PorcentajeIva, PorcentajeDescuento, BaseImponible, "
											+ " ImporteFactura, Observaciones, Id_Medico, Id_Paciente) VALUES"
						+ "	('" + new SimpleDateFormat("dd/MM/yyyy").format(this.getFecha()) + "'," +
										(this.getSerie() == null? "null" : "'" + getSerie() + "'") + "," +
										"(SELECT COALESCE((Select max(Numero) +1 FROM Facturas WHERE Serie = '" + (this.getSerie() == null? "" : getSerie()) +"'), 1))," + 
										(getPorcentajeIva() == null? 0 : getPorcentajeIva()) + "," + 
										(getPorcentajeDescuento() == null? 0 : getPorcentajeDescuento())+ "," + 
										(getBaseImponible() == null? 0 : getBaseImponible()) + "," + 
										(getImporteFactura() == null? 0: getImporteFactura()) + "," + 
										(this.getObservaciones() == null? "null" : "'" + getObservaciones() + "'") + "," +
										getMedico().getId() + "," + 
										getPaciente().getId() + 
								");";
		}else {
			sql += "UPDATE Facturas "
					+ " SET Fecha = '" + new SimpleDateFormat("dd/MM/yyyy").format(this.getFecha()) + "'," +
						"   Serie = " + (this.getSerie() == null? "null" : "'" + getSerie() + "'") + "," + 
						"   Numero = " + getNumero() + "," + 
						"   PorcentajeIva = " + (getPorcentajeIva() == null? 0 : getPorcentajeIva()) + "," + 
						"   PorcentajeDescuento = " + (getPorcentajeDescuento() == null? 0 : getPorcentajeDescuento()) + "," + 
						"   BaseImponible = " + (getBaseImponible() == null? 0 : getBaseImponible()) + "," + 
						"   ImporteFactura = " + (getImporteFactura() == null? 0: getImporteFactura()) + "," + 
						"   Observaciones = " + (this.getObservaciones() == null? "null" : "'" + getObservaciones() + "'") + "," + 
						"   Id_Medico = " + getMedico().getId() + "," +
						"   Id_Paciente = " + getPaciente().getId() + 
					" WHERE ID = " + getId() + ";"; 
		}
		//Insertamos/Modificamos los datos
		//Recorremos el detalle de la factura 
		for(FacturaDetalle det : this.getFacturaDetalle())
		{
			if(det.getId() == 0) { 
					sql += "INSERT INTO FacturaDetalle(Id_Factura, Id_HistorialClinicoDetalle_Tratamiento, Precio, Cobrado) VALUES " +
							"((SELECT MAX(ID) FROM Facturas)," +
							det.getHistorialClinicoDetalle_Tratamiento().getId() + "," + 
							det.getPrecio() + "," +
							det.getCobrado() +						
							");";
			}else sql+= "UPDATE FacturaDetalle SET Precio = " + det.getPrecio() + ",Cobrado = " + det.getCobrado() + " WHERE ID = " + String.valueOf(det.getId()) + ";";
		} 

		
		return ConexionBBDD.setDatos(sql);
	}
	
	/**
	 * Devolvemos un objeto de historialClinicoDetalle
	 * @return
	 */
	public HistorialClinicoDetalle getHistorialClinicoDetalle() {
		for(FacturaDetalle det: this.getFacturaDetalle()) {
			return det.getHistorialClinicoDetalle_Tratamiento().getHistorialClinicoDetalle();
		}
		return null;
	}

	@Override
	public boolean esEliminable() {
		//Esta entidad siempre va a poder ser eliminable. Más adelante podría ampliarse e imponerse un sistema de cobros o alguna otra utilidad
		return true;
	}

	@Override
	public boolean borrar() {
		String sql = 
				 "DELETE "
				+ "	FROM Facturas" 
				+ "	WHERE ID = " + this.getId();
		return ConexionBBDD.setDatos(sql); 
	}

}
