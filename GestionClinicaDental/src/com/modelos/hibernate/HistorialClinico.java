package com.modelos.hibernate;
// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.conexion.ConexionBBDD; 

/**
 * HistorialClinico generated by hbm2java
 */
@SuppressWarnings("serial")
public class HistorialClinico implements java.io.Serializable, IOperable {

	private int id; 
	private String enfermedadesFamiliares;
	private String antecedentesPatologicos;
	private String alergias;
	private ArrayList<HistorialClinicoDetalle> historialClinicoDetalle; 
 
	public HistorialClinico() {
		this.id = 0;
		this.historialClinicoDetalle = new ArrayList<HistorialClinicoDetalle>();
	}
	
	public HistorialClinico(int id) {
		this.id = id;
	}  

	public HistorialClinico(int id, String enfermedadesfamiliares, String antecedentespatologicos, String alergias) {
		this.id = id;
		this.enfermedadesFamiliares = enfermedadesfamiliares;
		this.antecedentesPatologicos = antecedentespatologicos;
		this.alergias = alergias;  
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
 
	public String getEnfermedadesFamiliares() {
		return this.enfermedadesFamiliares;
	}

	public void setEnfermedadesFamiliares(String enfermedadesfamiliares) {
		this.enfermedadesFamiliares = enfermedadesfamiliares;
	}

	public String getAntecedentesPatologicos() {
		return this.antecedentesPatologicos;
	}

	public void setAntecedentesPatologicos(String antecedentespatologicos) {
		this.antecedentesPatologicos = antecedentespatologicos;
	}

	public String getAlergias() {
		return this.alergias;
	}

	public void setAlergias(String alergias) {
		this.alergias = alergias;
	} 

	public ArrayList<HistorialClinicoDetalle> getHistorialClinicoDetalle() {
		return historialClinicoDetalle;
	}
 
	public void setHistorialClinicoDetalle(ArrayList<HistorialClinicoDetalle> historialClinicoDetalles) {
		this.historialClinicoDetalle = historialClinicoDetalles;
	}

	@Override
	public boolean cargar() {
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM HistorialClinico where id = " + this.getId());
			if(rs.next() == false) return false;
			else {  
				this.setAntecedentesPatologicos(rs.getString("AntecedentesPatologicos"));
				this.setEnfermedadesFamiliares(rs.getString("EnfermedadesFamiliares"));
				this.setAlergias(rs.getString("Alergias"));
				this.setHistorialClinicoDetalle(new HistorialClinicoDetalle().getLista(this)); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<HistorialClinico> getLista() {
		ArrayList<HistorialClinico> lista = new ArrayList<HistorialClinico>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM HistorialClinico");
			while(rs.next()) {
				HistorialClinico hc = new HistorialClinico();
				hc.setId(rs.getInt("ID")); 
				hc.setAntecedentesPatologicos(rs.getString("AntecedentesPatologicos"));
				hc.setEnfermedadesFamiliares(rs.getString("EnfermedadesFamiliares"));
				hc.setAlergias(rs.getString("Alergias"));
				hc.setHistorialClinicoDetalle(new HistorialClinicoDetalle().getLista(this));
				lista.add(hc);
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista;
	}

	@Override
	public boolean guardar() {
		return ConexionBBDD.setDatos(
				"UPDATE HistorialClinico "
					+ "	SET EnfermedadesFamiliares = " + (getEnfermedadesFamiliares() == null? "null" : "'" + getEnfermedadesFamiliares().trim() + "'") + "," 
					+ "		AntecedentesPatologicos = " + (getAntecedentesPatologicos() == null? "null" : "'" + getAntecedentesPatologicos().trim() + "'") + "," 
					+ "		Alergias = "+  (getAlergias() == null? "null" : "'" + getAlergias().trim() + "'")  
					+ "	WHERE Id = " + getId() + "; ");
	}

	@Override
	public boolean esEliminable() { 
		//La entidad Paciente crea por defecto esta entidad. No se puede eliminar. Si se elimina, debe eliminarse también el Paciente
		return false;
	}

	@Override
	public boolean borrar() {
		//La entidad Paciente crea por defecto esta entidad. No se puede eliminar. Si se elimina, debe eliminarse también el Paciente 
		return false;
	}
 
 

}
