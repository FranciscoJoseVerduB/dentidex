package com.modelos.hibernate;
// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList; 

import com.conexion.ConexionBBDD;

/**
 * Medicamento generated by hbm2java
 */
@SuppressWarnings("serial")
public class Medicamento implements java.io.Serializable, IOperable {

	private int id; 
	private String farmaco;
	private String nombreComercial;
	private String presentacion;
	private String indicacion;
	private String viaAdministracion; 

	public Medicamento() {
		this.id = 0;
	}

	public Medicamento(int id) {
		this.id = id;
	}
	
	public Medicamento(int id, String farmaco, String nombreComercial, String presentacion, String indicacion,
			String viaAdministracion) {
		this.id = id;
		this.farmaco = farmaco;
		this.nombreComercial = nombreComercial;
		this.presentacion = presentacion;
		this.indicacion = indicacion;
		this.viaAdministracion = viaAdministracion;
	}
 

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
 

	public String getFarmaco() {
		return this.farmaco;
	}

	public void setFarmaco(String farmaco) {
		this.farmaco = farmaco;
	}

	public String getNombreComercial() {
		return this.nombreComercial;
	}

	public void setNombreComercial(String nombreComercial) {
		this.nombreComercial = nombreComercial;
	}

	public String getPresentacion() {
		return this.presentacion;
	}

	public void setPresentacion(String presentacion) {
		this.presentacion = presentacion;
	}

	public String getIndicacion() {
		return this.indicacion;
	}

	public void setIndicacion(String indicacion) {
		this.indicacion = indicacion;
	}

	public String getViaAdministracion() {
		return this.viaAdministracion;
	}

	public void setViaAdministracion(String viaAdministracion) {
		this.viaAdministracion = viaAdministracion;
	}

	@Override
	public String toString() {
		return getNombreComercial();
	}
	
	

	@Override
	public boolean cargar() {
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM Medicamentos WHERE ID = " + this.getId());
			if (rs.next() == false) return false;
			else {  
				setFarmaco(rs.getString("Farmaco"));
				setIndicacion(rs.getString("Indicacion"));
				setNombreComercial(rs.getString("NombreComercial"));
				setPresentacion(rs.getString("Presentacion"));
				setViaAdministracion(rs.getString("ViaAdministracion"));
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<Medicamento> getLista() {
		ArrayList<Medicamento> lista = new ArrayList<Medicamento>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM Medicamentos");
			while(rs.next()) {
				Medicamento m = new Medicamento();
				m.setId(rs.getInt("Id"));
				m.setFarmaco(rs.getString("Farmaco"));
				m.setIndicacion(rs.getString("Indicacion"));
				m.setNombreComercial(rs.getString("NombreComercial"));
				m.setPresentacion(rs.getString("Presentacion"));
				m.setViaAdministracion(rs.getString("ViaAdministracion"));
				lista.add(m); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista;
	}

	@Override
	public boolean guardar() {
		String sql = "";
		
		if(this.getId() == 0) {
			sql = "INSERT INTO Medicamentos (Farmaco, Indicacion, NombreComercial, Presentacion, ViaAdministracion)"
					+ "	VALUES ('" + this.getFarmaco().trim() + "', '" + 
									 this.getIndicacion().trim() + "','" +
									 this.getNombreComercial().trim() + "','" + 
									 this.getPresentacion().trim() + "','" +
									 this.getViaAdministracion().trim() + "'" +
					")"; 
		}else {
			sql = "UPDATE Medicamentos "
					+ " SET Farmaco = '" + this.getFarmaco().trim() + "',"
						+ "	Indicacion = '" + this.getIndicacion().trim() + "'," 
						+ " NombreComercial = '"  + this.getNombreComercial() + "',"
						+ " Presentacion = '" + this.getPresentacion() + "'," 
						+ " ViaAdministracion = '" + this.getViaAdministracion() + "'" 
				+ " WHERE Id = " + this.getId();			
		} 	
		return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean esEliminable() {
		//Comprobamos si se ha realizado algun registro con esta entidad.
		if(Integer.parseInt(ConexionBBDD.getDato(
				"SELECT count(*) Existe " +
				 " FROM Medicamentos M " +  
				 " INNER JOIN Articulos A on A.Id_Medicamento = M.ID" + 
				 " WHERE M.ID = " + this.getId()).toString()) > 0) return false;  
		return true;
	}

	@Override
	public boolean borrar() {
		String sql = 
				 "DELETE "
				+ "	FROM Medicamentos" 
				+ "	WHERE ID = " + this.getId();
		return ConexionBBDD.setDatos(sql); 
	}

	 
	
}
