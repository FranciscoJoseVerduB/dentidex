package com.modelos.hibernate;
// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final
 
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList; 

import com.conexion.ConexionBBDD; 

/**
 * Medico generated by hbm2java
 */
@SuppressWarnings("serial")
public class Medico implements java.io.Serializable, IOperable, ISujeto, IUsuario {

	private int id;
	private Especialidad especialidad;
	private Sujeto sujeto;
	private String numeroColegiado; 

	public Medico() {
		this.id = 0;
		this.especialidad = new Especialidad();
		this.sujeto = new Sujeto(); 
	}
	
	public Medico(int id) {
		this.id = id;
	}

	public Medico(int id, Especialidad especialidad, Sujeto sujeto, String numeroColegiado) {
		this.id = id;
		this.especialidad = especialidad;
		this.sujeto = sujeto;
		this.numeroColegiado = numeroColegiado;
	}
 

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Especialidad getEspecialidad() {
		return this.especialidad;
	}

	public void setEspecialidad(Especialidad especialidad) {
		this.especialidad = especialidad;
	}

	public Sujeto getSujeto() {
		return this.sujeto;
	}

	public void setSujeto(Sujeto sujeto) {
		this.sujeto = sujeto;
	}

	public String getNumeroColegiado() {
		return this.numeroColegiado;
	}

	public void setNumeroColegiado(String numerocolegiado) {
		this.numeroColegiado = numerocolegiado;
	}

	@Override
	public String toString() {
		return getSujeto().toString();
	}
 
  

	@Override
	public boolean guardar() {
		//Guardamos o actualizamos el registro
		//Si el Id de la entidad es 0, significa que hay que guardar un registro nuevo 
		//Si el Id de la entidad no es 0, significa que debemos actualizar los datos del registro
		String sql = ""; 
		Direccion dir = getSujeto().getDireccion();
		if(this.getId() == 0) {
			sql = "Insert Into Direcciones (Direccion, Poblacion, CodigoPostal, Provincia, Pais)"
							+ " VALUES (" + (dir.getDireccion() == null? "null" : "'" + dir.getDireccion() + "'") + "," + 
							(dir.getPoblacion() == null? "null" : "'" + dir.getPoblacion() + "'") + "," + 
							(dir.getCodigoPostal() == null? "null" : "'" + dir.getCodigoPostal() + "'") +  "," + 
							(dir.getProvincia() == null? "null" : "'" + dir.getProvincia() + "'") +  "," + 
							(dir.getPais() == null? "null" : "'" + dir.getPais() + "'") + ");"; 
			sql += "	INSERT INTO Sujetos (Id_Direccion, FechaNacimiento, Nombre, Apellidos, Nif, Email, Telefono, Foto)"
							+ "	VALUES ((select Max(Id) FROM Direcciones), '" + 
											getSujeto().getFechaNacimiento().toString() + "', '" + 
											getSujeto().getNombre() + "', '" + 
											getSujeto().getApellidos() + "', '" +
											getSujeto().getNif() + "', '" + 
											getSujeto().getEmail() + "', '" + 
											getSujeto().getTelefono() + "'," + 
											(getSujeto().getFoto() == null? "null" : "'" + getSujeto().getFoto() + "'") + ");";
					
			sql += " INSERT INTO Medicos(Id_Sujeto, NumeroColegiado, Id_Especialidad)"
						+ " VALUES ((Select max(id) From Sujetos), " + (getNumeroColegiado() == null? "null" : "'" + getNumeroColegiado() + "'") + ", " + 
											(getEspecialidad().getId() > 0 ? String.valueOf(getEspecialidad().getId()) : "null") + ");"; 	

			sql += "INSERT INTO Usuarios (Id_Sujeto, Codigo, Contrasenia)"
					+ " VALUES ((Select max(id) From Sujetos)," + 
									(getSujeto().getUsuario().getCodigo() == null? "null" : "'" + getSujeto().getUsuario().getCodigo() + "'") + "," +
								    ((getSujeto().getUsuario().getContrasenia() == null? "null" : "'" + getSujeto().getUsuario().getContrasenia() + "'")) + ");";

		}else {
			sql = "  UPDATE Direcciones"
					+ " SET Direccion = " + (dir.getDireccion() == null? "null" : "'" + dir.getDireccion() + "'") + ","
						+ " Poblacion = " +  (dir.getPoblacion() == null? "null" : "'" + dir.getPoblacion() + "'") + ","
						+ " CodigoPostal = " + (dir.getCodigoPostal() == null? "null" : "'" + dir.getCodigoPostal() + "'") + ","
						+ " Provincia = " +  (dir.getProvincia() == null? "null" : "'" + dir.getProvincia() + "'") + ","
						+ "	Pais = " +  (dir.getPais() == null? "null" : "'" + dir.getPais() + "'") 
					+ " WHERE Id = " + getSujeto().getDireccion().getId() + ";"
					 
					+ "UPDATE Sujetos"
					+ "	SET FechaNacimiento = '" + getSujeto().getFechacreacion().toString() + "',"
						+ " Nombre = '" + getSujeto().getNombre() + "',"
						+ " Apellidos = '"+ getSujeto().getApellidos() + "',"
						+ " Nif = '" + getSujeto().getNif() + "',"
						+ " Email = '"+ getSujeto().getEmail() + "',"
						+ "	Telefono = '"+ getSujeto().getTelefono() + "',"
						+ "	Foto = " + (getSujeto().getFoto() == null? "null" : "'" + getSujeto().getFoto() + "'") 
					+ "	WHERE Id = " + getSujeto().getId() + ";"
					 
					+ "UPDATE Medicos"
					+ "	SET Id_Especialidad = " + (getEspecialidad().getId() > 0 ? String.valueOf(getEspecialidad().getId()) : "null") + ","
					+ "     NumeroColegiado = " + (getNumeroColegiado() == null? "null" : "'" + getNumeroColegiado() + "'")
					+ "	WHERE Id = " + getId() + ";" 
					 
					+ "	UPDATE Usuarios"
					+ "		SET Codigo = " + (getSujeto().getUsuario().getCodigo() == null? "null" : "'" + getSujeto().getUsuario().getCodigo() + "'") + ","
					+ "			Contrasenia = " + (getSujeto().getUsuario().getContrasenia() == null? "null" : "'" + getSujeto().getUsuario().getContrasenia() + "'")
					+ "		WHERE Id_Sujeto = " + getSujeto().getId() + ";"; 
		} 
		
		
		
		
		return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean esEliminable() {
		//Comprobamos si se ha realizado alguna cita con el paciente en cuestión.
		if(Integer.parseInt(ConexionBBDD.getDato(
				"SELECT count(*) Existe " +
				 " FROM Medicos M " +  
				 " INNER JOIN Citas C on C.ID_Medico = M.ID" + 
				 " WHERE M.ID = " + this.getId()).toString()) > 0) return false;  
		return true;
	}

	@Override
	public boolean borrar() {
		String sql = 
				 "DELETE "
				+ "	FROM Sujetos"
				+ "		USING Medicos"
				+ "	WHERE Medicos.Id_Sujeto = Sujetos.ID"
				+ "		AND Medicos.ID = " + this.getId();
		return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean cargar() {
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM MedicosVista WHERE Id_Medico = " + this.getId());
			if (rs.next() == false) return false;
			else {   
				setNumeroColegiado(rs.getString("NumeroColegiado"));
				if(rs.getObject("Id_Especialidad") != null) setEspecialidad(new Especialidad(rs.getInt("Id_Especialidad"), rs.getString("Especialidad")));
				
				Direccion direccion = new Direccion(rs.getInt("Id_Direccion"), rs.getString("Direccion"), rs.getString("Poblacion"), rs.getString("CodigoPostal"), rs.getString("Provincia"), rs.getString("Pais"));
				Sujeto suj = new Sujeto(rs.getInt("Id_Sujeto"), direccion, rs.getString("Nombre"), rs.getString("Apellidos"), rs.getString("Nif"));
				suj.setEmail(rs.getString("Email"));
				suj.setTelefono(rs.getString("Telefono"));
				suj.setFoto(rs.getString("Foto"));
				suj.setFechaCreacion(rs.getTimestamp("FechaCreacion"));
				suj.setFechaNacimiento(rs.getTimestamp("FechaNacimiento"));
				setSujeto(suj);
				if(rs.getObject("Id_Usuario") != null) suj.setUsuario(new Usuario(rs.getInt("Id_Usuario"), rs.getString("UsuarioClave"), rs.getString("Contrasenia"))); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<Medico> getLista() {
		ArrayList<Medico> lista = new ArrayList<Medico>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM MedicosVista");
			while(rs.next()) {
				Medico p = new Medico();
				p.setId(rs.getInt("Id_Medico"));
				p.setNumeroColegiado(rs.getString("NumeroColegiado"));
				if(rs.getObject("Id_Especialidad") != null) p.setEspecialidad(new Especialidad(rs.getInt("Id_Especialidad"), rs.getString("Especialidad")));
				
				Direccion direccion = new Direccion(rs.getInt("Id_Direccion"), rs.getString("Direccion"), rs.getString("Poblacion"), rs.getString("CodigoPostal"), rs.getString("Provincia"), rs.getString("Pais"));
				Sujeto suj = new Sujeto(rs.getInt("Id_Sujeto"), direccion, rs.getString("Nombre"), rs.getString("Apellidos"), rs.getString("Nif"));
				suj.setEmail(rs.getString("Email"));
				suj.setTelefono(rs.getString("Telefono"));
				suj.setFoto(rs.getString("Foto"));
				suj.setFechaCreacion(rs.getTimestamp("FechaCreacion"));
				suj.setFechaNacimiento(rs.getTimestamp("FechaNacimiento"));
				p.setSujeto(suj);
				suj.setUsuario(new Usuario());
				if(rs.getObject("Id_Usuario") != null) { 
					suj.getUsuario().setId(rs.getInt("Id_Usuario"));
					suj.getUsuario().setCodigo(rs.getString("UsuarioClave"));
					suj.getUsuario().setContrasenia(rs.getString("Contrasenia"));
				}
				
				 
				lista.add(p); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista;
	}

	@Override
	public boolean existeSujetoConNif(String nif) {
		if(Integer.parseInt(ConexionBBDD.getDato("SELECT count(*) Existe FROM MedicosVista Where Nif = '" + nif.trim() + "' and Id_Medico <>" + this.getId()).toString()) > 0) 
			return true;
			 
		return false;
	}

	@Override
	public boolean existeUsuarioConCodigo(String usuarioCodigo) {
		if(this.getSujeto() == null || this.getSujeto().getUsuario() == null) return false;
		if(Integer.parseInt(ConexionBBDD.getDato("SELECT count(*) Existe FROM Usuarios Where Codigo = '" + getSujeto().getUsuario().getCodigo().trim() + "' and Id <>" + this.getSujeto().getUsuario().getId()).toString()) > 0) 
			return true; 
			 
		return false;
	}
 
}
