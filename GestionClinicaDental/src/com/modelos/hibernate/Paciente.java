package com.modelos.hibernate;
 
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.util.ArrayList; 

import com.conexion.ConexionBBDD;
 

// Generated 5 may. 2021 19:19:57 by Hibernate Tools 5.4.27.Final
  
/**
 * Paciente generated by hbm2java
 */
@SuppressWarnings("serial")
public class Paciente implements java.io.Serializable, IOperable, ISujeto {

	private int id;
	private EstadoCivil estadoCivil;
	private Genero genero;
	private GrupoSanguineo grupoSanguineo;
	private Sujeto sujeto;
	private String profesion;
	private HistorialClinico historialClinico; 

	public Paciente() {
		this.id = 0;
		this.sujeto = new Sujeto();
		this.estadoCivil = new EstadoCivil();
		this.grupoSanguineo = new GrupoSanguineo();
		this.genero = new Genero();
		this.historialClinico = new HistorialClinico();
		this.profesion = ""; 
	}

	public Paciente(int id) {
		this.id = id;
	}
	
	public Paciente(int id, EstadoCivil estadoCivil, Genero generos, GrupoSanguineo grupoSanguineo,
			Sujeto sujeto, String profesion) {
		this.id = id;
		this.estadoCivil = estadoCivil;
		this.genero = generos;
		this.grupoSanguineo = grupoSanguineo;
		this.sujeto = sujeto;
		this.profesion = profesion;
	}

	public Paciente(int id, EstadoCivil estadoCivil, Genero generos, GrupoSanguineo grupoSanguineo,
			Sujeto sujeto, String profesion, HistorialClinico historialclinico) {
		this.id = id;
		this.estadoCivil = estadoCivil;
		this.genero = generos;
		this.grupoSanguineo = grupoSanguineo;
		this.sujeto = sujeto;
		this.profesion = profesion;
		this.setHistorialClinico(historialclinico); 
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public EstadoCivil getEstadoCivil() {
		return this.estadoCivil;
	}

	public void setEstadoCivil(EstadoCivil estadoCivil) {
		this.estadoCivil = estadoCivil;
	}

	public Genero getGenero() {
		return this.genero;
	}

	public void setGenero(Genero generos) {
		this.genero = generos;
	}

	public GrupoSanguineo getGrupoSanguineo() {
		return this.grupoSanguineo;
	}

	public void setGrupoSanguineo(GrupoSanguineo grupoSanguineo) {
		this.grupoSanguineo = grupoSanguineo;
	}

	public Sujeto getSujeto() {
		return this.sujeto;
	}

	public void setSujeto(Sujeto sujetos) {
		this.sujeto = sujetos;
	}
	 

	public String getProfesion() {
		return this.profesion;
	}

	public void setProfesion(String profesion) {
		this.profesion = profesion;
	}

	public HistorialClinico getHistorialClinico() {
		return historialClinico;
	}

	public void setHistorialClinico(HistorialClinico historialclinico) {
		this.historialClinico = historialclinico;
	} 
	
	
	@Override
	public boolean guardar() {
		//Guardamos o actualizamos el paciente
		//Si el Id del paciente es 0, significa que hay que guardar un registro nuevo del paciente
		//Si el Id del paciente no es 0, significa que debemos actualizar los datos del paciente
		String sql = ""; 
		Direccion dir = getSujeto().getDireccion();
		if(this.getId() == 0) {
			sql = "Insert Into Direcciones (Direccion, Poblacion, CodigoPostal, Provincia, Pais)"
					+ " VALUES (" + (dir.getDireccion() == null? "null" : "'" + dir.getDireccion() + "'") + "," + 
					(dir.getPoblacion() == null? "null" : "'" + dir.getPoblacion() + "'") + "," + 
					(dir.getCodigoPostal() == null? "null" : "'" + dir.getCodigoPostal() + "'") +  "," + 
					(dir.getProvincia() == null? "null" : "'" + dir.getProvincia() + "'") +  "," + 
					(dir.getPais() == null? "null" : "'" + dir.getPais() + "'") + ");"; 
			sql += "INSERT INTO Sujetos (Id_Direccion, FechaNacimiento, Nombre, Apellidos, Nif, Email, Telefono, Foto)"
					+ "	VALUES ((select Max(Id) FROM Direcciones), '" + 
									getSujeto().getFechaNacimiento().toString() + "', '" + 
									getSujeto().getNombre() + "', '" + 
									getSujeto().getApellidos() + "', '" +
									getSujeto().getNif() + "', '" + 
									getSujeto().getEmail() + "', '" + 
									getSujeto().getTelefono() + "'," + 
									(getSujeto().getFoto() == null? "null" : "'" + getSujeto().getFoto() + "'") + ");";
					
			sql += " INSERT INTO Pacientes(Id_Sujeto, Profesion, Id_GrupoSanguineo, Id_Genero, Id_EstadoCivil)"
					+ " 		VALUES ((Select max(id) From Sujetos)," + 
											(getProfesion() == null? "null" : "'" + getProfesion() + "'") + ",  " + 
											(getGrupoSanguineo().getId() > 0 ? String.valueOf(getGrupoSanguineo().getId()) : "null") + ", " + 
											(getGenero().getId() > 0 ? String.valueOf(getGenero().getId()) : "null") +", "+ 
											(getEstadoCivil().getId() > 0 ? String.valueOf(getEstadoCivil().getId()) : "null") + ");";
			sql += " INSERT INTO HistorialClinico(Id_Paciente, EnfermedadesFamiliares, AntecedentesPatologicos, Alergias)"
					+ " 	VALUES ((select max(id) FROM Pacientes), '', '', '');";
			
			return ConexionBBDD.setDatos(sql); 
		}else {
			sql = "  UPDATE Direcciones"
					+ " SET Direccion = " + (dir.getDireccion() == null? "null" : "'" + dir.getDireccion() + "'") +","
						+ " Poblacion = " +  (dir.getPoblacion() == null? "null" : "'" + dir.getPoblacion() + "'") + ","
						+ " CodigoPostal = " + (dir.getCodigoPostal() == null? "null" : "'" + dir.getCodigoPostal() + "'") + ","
						+ " Provincia = " +  (dir.getProvincia() == null? "null" : "'" + dir.getProvincia() + "'") +","
						+ "	Pais = " +  (dir.getPais() == null? "null" : "'" + dir.getPais() + "'") 
					+ " WHERE Id = " + getSujeto().getDireccion().getId() +";"
					 
					+ "UPDATE Sujetos"
					+ "	SET FechaNacimiento = '" + getSujeto().getFechaNacimiento().toString() +"',"
						+ " Nombre = '" + getSujeto().getNombre() + "',"
						+ " Apellidos = '"+ getSujeto().getApellidos() + "',"
						+ " Nif = '" + getSujeto().getNif() + "',"
						+ " Email = '"+ getSujeto().getEmail() + "',"
						+ "	Telefono = '"+ getSujeto().getTelefono() +"',"
						+ "	Foto = " + (getSujeto().getFoto() == null? "null" : "'" + getSujeto().getFoto() + "'") 
					+ "	WHERE Id = " + getSujeto().getId() +";"
					 
					+ "UPDATE Pacientes"
					+ "	SET Id_GrupoSanguineo = " + (getGrupoSanguineo().getId() > 0 ? String.valueOf(getGrupoSanguineo().getId()) : "null") + ","
					+ "		Id_Genero = " + (getGenero().getId() > 0 ? String.valueOf(getGenero().getId()) : "null") +","
					+ "		Id_EstadoCivil = " + (getEstadoCivil().getId() > 0 ? String.valueOf(getEstadoCivil().getId()) : "null") + ","
					+ "     Profesion = " + (getProfesion() == null? "null" : "'" + getProfesion() + "'")
					+ "	WHERE Id = " + getId() + ";";
			  
			return ConexionBBDD.setDatos(sql); 
		} 
	}
  
 
	@Override
	public String toString() {
		return getSujeto().toString();
	}

	@Override
	public boolean esEliminable() {
		//Comprobamos si ya se ha trabajado en el historial clinico con el paciente en cuestión
		if(Integer.parseInt(ConexionBBDD.getDato(
				"SELECT count(*) Existe " +
				 " FROM Pacientes P" +
				 " INNER JOIN HistorialClinico HC ON HC.ID_Paciente = P.ID" +
				 " INNER JOIN HistorialClinicoDetalle HCD ON HCD.ID_HistorialClinico = HC.ID" +
				 " WHERE P.ID = " + this.getId()).toString()) > 0) return false;
		
		//Comprobamos si se ha realizado alguna cita con el paciente en cuestión.
		if(Integer.parseInt(ConexionBBDD.getDato(
				"SELECT count(*) Existe " +
				 " FROM Pacientes P" +  
				 " INNER JOIN Citas C on C.ID_Paciente = P.ID" + 
				 " WHERE P.ID = " + this.getId()).toString()) > 0) return false; 
		
		return true;
	}

	@Override
	public boolean borrar() {
		 String sql = 
			 "DELETE "
			+ "	FROM Sujetos"
			+ "		USING Pacientes"
			+ "	WHERE Pacientes.Id_Sujeto = Sujetos.ID"
			+ "		AND Pacientes.ID = " + this.getId();
		 return ConexionBBDD.setDatos(sql); 
	}

	@Override
	public boolean cargar() { 
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM PacientesVista Where Id_Paciente = " + this.getId());
			if(rs.next() == false) return false;
			else {  
				if(rs.getObject("Id_Genero") != null) setGenero(new Genero(rs.getInt("Id_Genero"), rs.getString("genero"), rs.getString("generoNombre")));
				if(rs.getObject("Id_EstadoCivil") != null) setEstadoCivil(new EstadoCivil(rs.getInt("Id_EstadoCivil"), rs.getString("EstadoCivil")));
				if(rs.getObject("Id_GrupoSanguineo") != null) setGrupoSanguineo(new GrupoSanguineo(rs.getInt("Id_GrupoSanguineo"), rs.getString("GrupoSanguineo"), rs.getString("PuedeRecibirDe"), rs.getString("PuedeDonarA")));
				if(rs.getObject("Id_HistorialClinico") != null){
					setHistorialClinico(new HistorialClinico(rs.getInt("Id_HistorialClinico"), rs.getString("EnfermedadesFamiliares"), rs.getString("AntecedentesPatologicos"), rs.getString("Alergias")));
				}
				Direccion direccion = new Direccion(rs.getInt("Id_Direccion"), rs.getString("Direccion"), rs.getString("Poblacion"), rs.getString("CodigoPostal"), rs.getString("Provincia"), rs.getString("Pais"));
				Sujeto suj = new Sujeto(rs.getInt("Id_Sujeto"), direccion, rs.getString("Nombre"), rs.getString("Apellidos"), rs.getString("Nif"));
				suj.setEmail(rs.getString("Email"));
				suj.setTelefono(rs.getString("Telefono"));
				suj.setFoto(rs.getString("Foto"));
				suj.setFechaCreacion(rs.getTimestamp("FechaCreacion"));
				suj.setFechaNacimiento(rs.getTimestamp("FechaNacimiento"));
				setSujeto(suj); 
				 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
			return false;
		} 
		return true;
	}

	@Override
	public ArrayList<Paciente> getLista() { 
		ArrayList<Paciente> lista = new ArrayList<Paciente>();
		try {
			ResultSet rs = ConexionBBDD.getDatos("SELECT * FROM PacientesVista");
			while(rs.next()) {
				Paciente p = new Paciente();
				p.setId(rs.getInt("Id_Paciente"));
				p.setProfesion(rs.getString("Profesion"));
				if(rs.getObject("Id_Genero") != null) p.setGenero(new Genero(rs.getInt("Id_Genero"), rs.getString("genero"), rs.getString("generoNombre")));
				if(rs.getObject("Id_EstadoCivil") != null) p.setEstadoCivil(new EstadoCivil(rs.getInt("Id_EstadoCivil"), rs.getString("EstadoCivil")));
				if(rs.getObject("Id_GrupoSanguineo") != null) p.setGrupoSanguineo(new GrupoSanguineo(rs.getInt("Id_GrupoSanguineo"), rs.getString("GrupoSanguineo"), rs.getString("PuedeRecibirDe"), rs.getString("PuedeDonarA")));
				if(rs.getObject("Id_HistorialClinico") != null){
					p.setHistorialClinico(new HistorialClinico(rs.getInt("Id_HistorialClinico"), rs.getString("EnfermedadesFamiliares"), rs.getString("AntecedentesPatologicos"), rs.getString("Alergias")));
				}
				Direccion direccion = new Direccion(rs.getInt("Id_Direccion"), rs.getString("Direccion"), rs.getString("Poblacion"), rs.getString("CodigoPostal"), rs.getString("Provincia"), rs.getString("Pais"));
				Sujeto suj = new Sujeto(rs.getInt("Id_Sujeto"), direccion, rs.getString("Nombre"), rs.getString("Apellidos"), rs.getString("Nif"));
				suj.setEmail(rs.getString("Email"));
				suj.setTelefono(rs.getString("Telefono"));
				suj.setFoto(rs.getString("Foto"));
				suj.setFechaCreacion(rs.getTimestamp("FechaCreacion"));
				suj.setFechaNacimiento(rs.getTimestamp("FechaNacimiento"));
				p.setSujeto(suj);
				lista.add(p); 
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} 
		return lista;
	}

	@Override
	public boolean existeSujetoConNif(String nif) {
		if(Integer.parseInt(ConexionBBDD.getDato("SELECT count(*) Existe FROM PacientesVista Where Nif = '" + nif.trim() + "' and Id_Paciente <>" + this.getId()).toString()) > 0) 
			return true; 
		return false;
	}


}
